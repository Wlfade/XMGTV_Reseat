// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: IMMessage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct UserInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var level: Int32 {
    get {return _level ?? 0}
    set {_level = newValue}
  }
  /// Returns true if `level` has been explicitly set.
  var hasLevel: Bool {return self._level != nil}
  /// Clears the value of `level`. Subsequent reads from it will return its default value.
  mutating func clearLevel() {self._level = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var iconURL: String {
    get {return _iconURL ?? String()}
    set {_iconURL = newValue}
  }
  /// Returns true if `iconURL` has been explicitly set.
  var hasIconURL: Bool {return self._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
  mutating func clearIconURL() {self._iconURL = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _level: Int32? = nil
  fileprivate var _name: String? = nil
  fileprivate var _iconURL: String? = nil
}

struct ChatMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: UserInfo {
    get {return _user ?? UserInfo()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var text: String {
    get {return _text ?? String()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  mutating func clearText() {self._text = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _user: UserInfo? = nil
  fileprivate var _text: String? = nil
}

struct GiftMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: UserInfo {
    get {return _user ?? UserInfo()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var giftname: String {
    get {return _giftname ?? String()}
    set {_giftname = newValue}
  }
  /// Returns true if `giftname` has been explicitly set.
  var hasGiftname: Bool {return self._giftname != nil}
  /// Clears the value of `giftname`. Subsequent reads from it will return its default value.
  mutating func clearGiftname() {self._giftname = nil}

  var giftURL: String {
    get {return _giftURL ?? String()}
    set {_giftURL = newValue}
  }
  /// Returns true if `giftURL` has been explicitly set.
  var hasGiftURL: Bool {return self._giftURL != nil}
  /// Clears the value of `giftURL`. Subsequent reads from it will return its default value.
  mutating func clearGiftURL() {self._giftURL = nil}

  var giftcount: Int32 {
    get {return _giftcount ?? 0}
    set {_giftcount = newValue}
  }
  /// Returns true if `giftcount` has been explicitly set.
  var hasGiftcount: Bool {return self._giftcount != nil}
  /// Clears the value of `giftcount`. Subsequent reads from it will return its default value.
  mutating func clearGiftcount() {self._giftcount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _user: UserInfo? = nil
  fileprivate var _giftname: String? = nil
  fileprivate var _giftURL: String? = nil
  fileprivate var _giftcount: Int32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension UserInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "level"),
    2: .same(proto: "name"),
    3: .same(proto: "iconURL"),
  ]

  public var isInitialized: Bool {
    if self._level == nil {return false}
    if self._name == nil {return false}
    if self._iconURL == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._level) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._iconURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._level {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._iconURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: UserInfo, rhs: UserInfo) -> Bool {
    if lhs._level != rhs._level {return false}
    if lhs._name != rhs._name {return false}
    if lhs._iconURL != rhs._iconURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ChatMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ChatMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "text"),
  ]

  public var isInitialized: Bool {
    if self._user == nil {return false}
    if self._text == nil {return false}
    if let v = self._user, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ChatMessage, rhs: ChatMessage) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs._text != rhs._text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GiftMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "giftname"),
    3: .same(proto: "giftURL"),
    4: .same(proto: "giftcount"),
  ]

  public var isInitialized: Bool {
    if self._user == nil {return false}
    if self._giftname == nil {return false}
    if self._giftURL == nil {return false}
    if self._giftcount == nil {return false}
    if let v = self._user, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._giftname) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._giftURL) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._giftcount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._giftname {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._giftURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._giftcount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftMessage, rhs: GiftMessage) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs._giftname != rhs._giftname {return false}
    if lhs._giftURL != rhs._giftURL {return false}
    if lhs._giftcount != rhs._giftcount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
